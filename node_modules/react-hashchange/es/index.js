var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// 3rd-party imports

import React, { Component } from "react";
import PropTypes from "prop-types";

// helpers

var getLocationHash = function getLocationHash() {
    return window.location.hash;
};

// component

var HashChange = (_temp2 = _class = function (_Component) {
    _inherits(HashChange, _Component);

    function HashChange() {
        var _temp, _this, _ret;

        _classCallCheck(this, HashChange);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
            hash: _this.props.getLocationHash()
        }, _this.handleHashChange = function () {
            var hash = _this.props.getLocationHash();

            _this.props.onChange({ hash: hash });
            _this.setState({ hash: hash });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    HashChange.prototype.componentDidMount = function componentDidMount() {
        window.addEventListener("hashchange", this.handleHashChange, false);
    };

    HashChange.prototype.componentWillUnmount = function componentWillUnmount() {
        window.removeEventListener("hashchange", this.handleHashChange, false);
    };

    HashChange.prototype.render = function render() {
        var _props = this.props,
            children = _props.children,
            render = _props.render;


        if (render) {
            return render(this.state);
        }

        if (children) {
            if (typeof children === "function") {
                return children(this.state);
            }

            return React.Children.only(children)(this.state);
        }

        return null;
    };

    return HashChange;
}(Component), _class.defaultProps = {
    render: null,
    onChange: function onChange() {},
    getLocationHash: getLocationHash
}, _temp2);
export { HashChange as default };
HashChange.propTypes = process.env.NODE_ENV !== "production" ? {
    render: PropTypes.func,
    onChange: PropTypes.func,
    getLocationHash: PropTypes.func,
    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.func])
} : {};